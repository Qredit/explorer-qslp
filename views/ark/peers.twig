{% extends '/blocks/main.twig' %}

{% block body %}
{% include '/blocks/arkmenu.twig' %}



<div class="container mh">
	<div class="col-lg-12 col-12">
	<br><br>
		<div class="box">
			<div class="box-header with-border">
				<h4 class="box-title">Peers</h4>
			</div>
			<br>
			<div class="box-body">
				<div id="chartdiv"></div>
				<div class="table-responsive">
					<table class="table no-margin table-hover">
						<thead>
							<tr>
								<th scope="col">IP</th>
								<th scope="col">P2P-Port</th>
								<th scope="col">Version</th>
								<th scope="col">Height</th>
								<th scope="col">Latency</th>
							</tr>
						</thead>
						<tbody id='peers'></tbody>
					</table>
				</div>
			</div>
		</div>
	</div>

</div>{% include '/cards/footer.twig' %}{% endblock %}{% block javascripts %}
<style>
#chartdiv {
  width: 100%;
  height: 300px;
  overflow: hidden;
}
</style>


<script>
var root;
var chart;
var pointSeries;
$(document).ready(function () {


		var socket = io();

		socket.emit('arkgetpeers', {});

		socket.on('arkshowpeers', function (data) {

			var mainTable = document.getElementById("peers");

			var tr,
				td;
			
			am5.ready(function() {

			// Create root element
			// https://www.amcharts.com/docs/v5/getting-started/#Root_element
			root = am5.Root.new("chartdiv");

			// Set themes
			// https://www.amcharts.com/docs/v5/concepts/themes/
			root.setThemes([
			  am5themes_Animated.new(root)
			]);

			// Create the map chart
			// https://www.amcharts.com/docs/v5/charts/map-chart/
			chart = root.container.children.push(
			  am5map.MapChart.new(root, {
			    panX: "rotateX",
			    panY: "translateY",
			    projection: am5map.geoMercator(),
			    homeZoomLevel: 3.5,
			    homeGeoPoint: { longitude: -30.384108, latitude: 38.305542 }
			  })
			);

			var cont = chart.children.push(
			  am5.Container.new(root, {
			    layout: root.horizontalLayout,
			    x: 20,
			    y: 40
			  })
			);

			// Add labels and controls
			cont.children.push(
			  am5.Label.new(root, {
			    centerY: am5.p50,
			    text: "Map"
			  })
			);

			var switchButton = cont.children.push(
			  am5.Button.new(root, {
			    themeTags: ["switch"],
			    centerY: am5.p50,
			    icon: am5.Circle.new(root, {
			      themeTags: ["icon"]
			    })
			  })
			);

			switchButton.on("active", function() {
			  if (!switchButton.get("active")) {
			    chart.set("projection", am5map.geoMercator());
			    chart.set("panY", "translateY");
			    chart.set("rotationY", 0);
			    backgroundSeries.mapPolygons.template.set("fillOpacity", 0);
			  } else {
			    chart.set("projection", am5map.geoOrthographic());
			    chart.set("panY", "rotateY");

			    backgroundSeries.mapPolygons.template.set("fillOpacity", 0.1);
			  }
			});

			cont.children.push(
			  am5.Label.new(root, {
			    centerY: am5.p50,
			    text: "Globe"
			  })
			);

			// Create series for background fill
			// https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon
			var backgroundSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));
			backgroundSeries.mapPolygons.template.setAll({
			  fill: root.interfaceColors.get("alternativeBackground"),
			  fillOpacity: 0,
			  strokeOpacity: 0
			});

			// Add background polygon
			// https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon
			backgroundSeries.data.push({
			  geometry: am5map.getGeoRectangle(90, 180, -90, -180)
			});

			// Create main polygon series for countries
			// https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/
			var polygonSeries = chart.series.push(
			  am5map.MapPolygonSeries.new(root, {
			    geoJSON: am5geodata_worldLow
			  })
			);

			// Create line series for trajectory lines
			// https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/
			var lineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));
			lineSeries.mapLines.template.setAll({
			  stroke: root.interfaceColors.get("alternativeBackground"),
			  strokeOpacity: 0.3
			});

			// Create point series for markers
			// https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/
			pointSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));
			//pointSeries.pushDataItem({ latitude: 40.641312, longitude: -73.778137, title:"pepe"});
			var colorset = am5.ColorSet.new(root, {});

			pointSeries.bullets.push(function () {
			  var container = am5.Container.new(root, {});

			  var circle = container.children.push(
			    am5.Circle.new(root, {
			      radius: 4,
			      tooltipY: 0,
			      fill: colorset.next(),
			      strokeOpacity: 0,
			      tooltipText: "{title}"
			    })
			  );

			  var circle2 = container.children.push(
			    am5.Circle.new(root, {
			      radius: 4,
			      tooltipY: 0,
			      fill: colorset.next(),
			      strokeOpacity: 0,
			      tooltipText: "{title}"
			    })
			  );

			  circle.animate({
			    key: "scale",
			    from: 1,
			    to: 5,
			    duration: 600,
			    easing: am5.ease.out(am5.ease.cubic),
			    loops: Infinity
			  });
			  circle.animate({
			    key: "opacity",
			    from: 1,
			    to: 0,
			    duration: 600,
			    easing: am5.ease.out(am5.ease.cubic),
			    loops: Infinity
			  });

			  return am5.Bullet.new(root, {
			    sprite: container
			  });
			});


			data.forEach(function (row) {
				console.log(pointSeries);
				console.log(row.peerll);
				pointSeries.data.push({
				  geometry: { type: "Point", coordinates: [row.peerll[1], row.peerll[0]] },
				  title: row.peerip
				});

				tr = document.createElement("tr");

				td = document.createElement("td");
				td.innerHTML = row.peerflag + " " +row.peerip;
				tr.appendChild(td);

				td = document.createElement("td");
				td.innerHTML = row.p2pport;
				tr.appendChild(td);

				td = document.createElement("td");
				td.innerHTML = row.version;
				tr.appendChild(td);

				td = document.createElement("td");
				td.innerHTML = row.height;
				tr.appendChild(td);

				td = document.createElement("td");
				td.innerHTML = row.latency;
				tr.appendChild(td);


				peers.appendChild(tr);

			});

			// Make stuff animate on load
			chart.appear(1000, 100);



	});

			

		});

	});</script>{% endblock %}

{% block footer_scripts %} 
	<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
	<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
	<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
	<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
		<script>
		$(document).ready(function () {

	      });

	</script>

{% endblock %}